generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
  tasks       Task[]
  comments    Comment[]
  activities  Activity[]
  
  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
  boards      Board[]
  invitations Invitation[]
  
  @@map("teams")
}

model Membership {
  id        String   @id @default(cuid())
  role      String   // owner, admin, member
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("memberships")
}

model Board {
  id        String   @id @default(cuid())
  name      String
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  columns Column[]
  
  @@map("boards")
}

model Column {
  id        String   @id @default(cuid())
  name      String
  position  Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]
  
  @@map("columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    Int
  columnId    String
  assigneeId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee User?     @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  comments Comment[]
  
  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  teamId    String
  role      String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("invitations")
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  data      Json
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}
